const STORAGE_KEY = 'geoscoreQuestions';

export const DEFAULT_QUESTIONS = [
  {
    question: 'Name a country in South America',
    answers: [
      { answer: 'Brazil', score: 10, count: 35 },
      { answer: 'Argentina', score: 9, count: 20 },
      { answer: 'Chile', score: 8, count: 15 },
      { answer: 'Peru', score: 7, count: 10 },
      { answer: 'Colombia', score: 6, count: 8 }
    ]
  },
  {
    question: 'Name a U.S. state that starts with M',
    answers: [
      { answer: 'Michigan', score: 10, count: 25 },
      { answer: 'Mississippi', score: 9, count: 15 },
      { answer: 'Montana', score: 8, count: 12 },
      { answer: 'Missouri', score: 7, count: 10 },
      { answer: 'Maryland', score: 6, count: 8 }
    ]
  },
  {
    question: 'Name a European capital city',
    answers: [
      { answer: 'Paris', score: 10, count: 28 },
      { answer: 'London', score: 9, count: 26 },
      { answer: 'Berlin', score: 8, count: 20 },
      { answer: 'Rome', score: 7, count: 18 },
      { answer: 'Madrid', score: 6, count: 12 }
    ]
  }
];

export async function loadQuestions() {
  try {
    const raw = localStorage.getItem(STORAGE_KEY);
    const parsed = JSON.parse(raw);
    if (Array.isArray(parsed) && parsed.length) {
      return parsed;
    }
  } catch {}
  try {
    const res = await fetch('geoscore_questions.json');
    if (res.ok) {
      const data = await res.json();
      saveQuestions(data);
      return data;
    }
  } catch {}
  // If nothing stored, seed with defaults
  saveQuestions(DEFAULT_QUESTIONS);
  return JSON.parse(JSON.stringify(DEFAULT_QUESTIONS));
}

export function saveQuestions(qs) {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(qs));
  } catch {}
}

export async function initGeoScorePanel() {
  const container = document.getElementById('geoscoreAdmin');
  if (!container) return;
  container.innerHTML = '';

  const header = document.createElement('p');
  header.textContent = 'Questions are generated by script and are read-only here.';
  container.appendChild(header);

  const list = document.createElement('ul');
  list.id = 'geoscoreList';
  container.appendChild(list);

  const questions = await loadQuestions();
  list.innerHTML = '';
  questions.forEach((q) => {
    const li = document.createElement('li');
    const title = document.createElement('div');
    title.textContent = q.question;
    li.appendChild(title);

    const ansList = document.createElement('ul');
    (q.answers || []).forEach(a => {
      const ai = document.createElement('li');
      ai.textContent = `${a.answer} (${a.count || 0})`;
      ansList.appendChild(ai);
    });
    li.appendChild(ansList);

    list.appendChild(li);
  });
}

if (typeof window !== 'undefined') {
  window.initGeoScorePanel = initGeoScorePanel;
}
